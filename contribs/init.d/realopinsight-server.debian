#! /bin/sh
### BEGIN INIT INFO
# Provides:          realopinsight-server
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: realopinsight-server  initscript
# Description:       This script allows to manage the RealOpInsight Ultimate's
#                    http server (realopinsightd).
### END INIT INFO

# Author: Rodrigue Chakode <rodrigue.chakode@realopinsight.com>
# Copyright (c) 2015 RealOpInsight Labs

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="RealOpInsight Ultimate http server"
NAME=realopinsight-server
ENV_CMD=/usr/bin/env
HTTP_USER=realopinsight
HTTP_SERVER_BINARY=/opt/realopinsight/sbin/$NAME
HTTP_SERVER_PORT=4583
HTTP_SERVER_ADDR=0.0.0.0
HTTP_SERVER_ROOT=/opt/realopinsight/www
HTTP_SERVER_ARGS="--docroot $HTTP_SERVER_ROOT --http-address $HTTP_SERVER_ADDR --http-port $HTTP_SERVER_PORT --deploy /realopinsight"
EXEC_COMMAND="LD_LIBRARY_PATH=/opt/realopinsight/lib $HTTP_SERVER_BINARY $HTTP_SERVER_ARGS"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DEFAULT_START_OPTIONS="--background --quiet --chuid $HTTP_USER"
DEFAULT_STOP_OPTIONS="--quiet --chuid $HTTP_USER"

# Exit if the package is not installed
[ -x "$HTTP_SERVER_BINARY" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start $DEFAULT_START_OPTIONS --pidfile $PIDFILE --exec $ENV_CMD --test > /dev/null \
                || return 1
        start-stop-daemon --start $DEFAULT_START_OPTIONS --pidfile $PIDFILE --exec $ENV_CMD -- $EXEC_COMMAND \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
#
# Function that stops the daemon/service
#
do_stop()
{
        PIDS=$(ps -edf | grep $HTTP_SERVER_BINARY | grep -v grep | awk '{print $2}')
        for pid in $PIDS; do kill -TERM $pid; done
        RETVAL=$?
        [ $RETVAL -eq 0 ] && rm -f $PIDFILE
        return "$RETVAL"
}


#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop $DEFAULT_START_OPTIONS --signal 1 --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$HTTP_SERVER_BINARY" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
